#!/usr/bin/env python
# ------------------------------------------------------------
# setlan
#
# Program for lexical analysis of programs in setlan language.
#
# Author:
# Victor De Ponte, 05-38087, <rdbvictor19@gmail.com>
#
# Usage:
#
#     $ ./setlan program.stl
#
# where program.stl is a file containing the program to be
# analyzed.
# ------------------------------------------------------------
import sys
import argparse

from lang import lexical_specs, syntax_specs
from lang.exceptions import (
    SetlanInputNotDefinedException,
    SetlanTokensNotDefinedException,
    SetlanLexicalErrors,
    SetlanValueError,
    SetlanSyntaxError,
    SetlanStaticErrors,
    SetlanScopeError,
    SetlanTypeError,
    SetlanZeroDivisionError,
    SetlanOverflowError,
    SetlanEmptySetError
    )
from lang.config import SetlanConfig

from lib.LexerWrapper import Lexer

from ply import yacc

class SetlanInterpreter(SetlanConfig):

    def __init__(self, *args, **kwargs):
        super(SetlanInterpreter, self).__init__()
        self._opts = None

    def processArgs(self, args):
        description  = "Setlan language interpreter, written in python, using "
        description += "PLY's lexing and parsing engine. At this point, "
        description += "lexing, parsing, static checks and execution are "
        description += "supported. Next is the explanation of setlan "
        description += "interpreter usage and options. In case the user "
        description += "doesn't pass any flag, the flag -e is set to True by "
        description += "default. Otherwise, only the options explicitly passed "
        description += "will be taken into account, according to the following "
        description += "specification:"

        epilog = "Author: Victor De Ponte <rdbvictor19@gmail.com>, @Throoze."
        args_parser = argparse.ArgumentParser(
            prog="setlan",
            description=description,
            epilog=epilog
            )
        args_parser.add_argument('-v','--version', 
            action='version', version='%(prog)s ' + self.VERSION)
        args_parser.add_argument('-t','--token-list', action='store_true',
            help="prints the matched Token List")
        args_parser.add_argument('-a','--ast', action='store_true',
            help="prints the generated Abstract Syntax Tree")
        args_parser.add_argument('-s','--sym-table', action='store_true',
            help="prints the generated Symbol Table")
        args_parser.add_argument('-e','--execute', action='store_true',
            help="executes the program in <filename> and exit.")
        args_parser.add_argument('filename',
            help="the path to a file, with '.stl' extension, containing the program to be interpreted")
        ns = args_parser.parse_args()
        if not (ns.token_list or ns.sym_table or ns.ast or ns.execute):
            ns.execute = True
        self._opts = ns
        try :
            file = open(self._opts.filename, 'r')
        except IOError as e:
            print "setlan: IOError: %s" % str(e)
            exit(self.ERR_BAD_FILENAME)
        try:
            self._inputString = file.read()
        except IOError as e:
            print "setlan: IOError: %s" % str(e)
            exit(self.ERR_IO_ERROR)
        self._build()
        return True

    def _build(self):
        self._lexer = None
        self._parser = None
        self._ast = None

    def run(self):
        self._lexer = Lexer(module=lexical_specs, inputString=self._inputString)
        if self._opts.token_list:
            print "################### Token List ####################"
            for token in self._lexer.getTokenList():
                print token
            print "################ End of Token List ################"
        self._parser = yacc.yacc(module=syntax_specs)
        self._ast = self._parser.parse(lexer=self._lexer, tracking=True)
        if self._opts.ast :
            print "############## Abstract Syntax Tree ###############"
            print self._ast
            print "########### End of Abstract Syntax Tree ###########"
        self._symtable = self._ast.staticChecks()
        errors_acc = SetlanStaticErrors.Instance()
        if errors_acc.has_errors():
            raise errors_acc
        else:
            if self._opts.sym_table:
                print "################## Symbol Table ###################"
                print self._symtable
                print "############### End of Symbol Table ###############"
            if self._opts.execute:
                self._ast.execute()


if __name__ == '__main__':
    setlan = SetlanInterpreter()
    if (setlan.processArgs(sys.argv)):
        try:
            setlan.run()
            exit(SetlanConfig.SUCCESS)
        except SetlanInputNotDefinedException as einp:
            print einp
            exit(SetlanConfig.ERR_INPUT_NOT_PROVIDED)
        except SetlanTokensNotDefinedException as etnd:
            print etnd
            exit(SetlanConfig.ERR_LANG_LEX_MODULE_NOT_PROVIDED)
        except SetlanLexicalErrors as esle:
            print esle
            exit(SetlanConfig.ERR_LEXICOGRAPHICAL_ERROR)
        except SetlanValueError as esve:
            print esve
            exit(SetlanConfig.ERR_VALUE_ERROR)
        except SetlanSyntaxError as esse:
            print esse
            exit(SetlanConfig.ERR_SYNTAX_ERROR)
        except SetlanStaticErrors.Instance().__class__ as esste:
            print esste
            exit(SetlanConfig.ERR_STATIC_ERROR)
        except SetlanScopeError as essce:
            print essce
            exit(SetlanConfig.ERR_SCOPE_ERROR)
        except SetlanTypeError as este:
            print este
            exit(SetlanConfig.ERR_TYPE_ERROR)
        except SetlanZeroDivisionError as szde:
            print szde
            exit(SetlanConfig.ERR_ZERO_DIVISION)
        except SetlanOverflowError as soe:
            print soe
            exit(SetlanConfig.ERR_OVERFLOW)
        except SetlanEmptySetError as sese:
            print sese
            exit(SetlanConfig.ERR_EMPTY_SET)
        except KeyboardInterrupt as kie:
            print "\nExecution interupted... Good Bye!"
            exit(SetlanConfig.ERR_KEYBOARD_INTERRUPT)