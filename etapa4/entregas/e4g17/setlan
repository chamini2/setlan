#! /usr/bin/env python
# -*- coding: utf-8 -*-

# # # # # # # # # # # # # # # # # # # # # # # #
#	TRADUCTORES E INTERPRETADORES CI3725      #
#	Primera entrega del proyecto.             #
#   Lexer para el lenguaje Setlan             #
#	Autores: Carlos Martínez 	- 11-10584    #
#			 Christian Teixeira - 11-11016    #
# # # # # # # # # # # # # # # # # # # # # # # #

import sl_lexer, sl_parser, sl_typecheck, sl_interpreter
import os.path

# Main del programa

def getcol(lineno, lexpos):
	aux = 0
	for i in range(lineno - 1):
		aux = aux + len(lineas[i])
	return str(lexpos - aux + 1)

def main(argv  = None):
	import sys

	# Comprobacion de errores de entrada
	if argv is None :
		argv = sys.argv
	if len(argv) < 2:
		print("ERROR: Número incorrecto de argumentos.")
		print("Uso: ./setlan [Nombre_Archivo] [-t|-a|-s]")
		print("Por favor verifíque que el archivo existe en su directorio y está correctamente escrito.\n")
		exit(1)
	if argv[1][0] == "-":
		print("ERROR: El primer argumento debe ser el nombre del archivo, no un flag.\n")
		print("Uso: ./setlan [Nombre_Archivo] [-t|-a|-s]")
		exit(1)
	if len(argv) == 3 and argv[2] not in ["-t", "-a", "-s"]:
		print("ERROR: No se reconoce el flag.")
		print("Uso: ./setlan [Nombre_Archivo] [-t|-a|-s]\n")
		exit(1)
	if len(argv) == 4 and argv[3] not in ["-t", "-a", "-s"]:
		print("ERROR: No se reconoce el flag.")
		print("Uso: ./setlan [Nombre_Archivo] [-t|-a|-s]\n")
		exit(1)
	if len(argv) == 5 and argv[4] not in ["-t", "-a", "-s"]:
		print("ERROR: No se reconoce el flag.")
		print("Uso: ./setlan [Nombre_Archivo] [-t|-a|-s]\n")
		exit(1)
	if not os.path.exists(argv[1]): 
		print("ERROR: El archivo especificado no existe.\n")
		exit(1)
	if str(argv[1])[-4:] != ".stl": 
		print("ERROR: El archivo especificado no posee el formato '.stl'.\n")
		exit(1)

	global error_lex
	global error_par
	global lineas
	error_lex = []
	error_par = []
	error_st = []
	error_intr = []
	out = []

	nombreArchivo = argv[1]
	archivo = open(nombreArchivo, "r")
	lineas = archivo.readlines()
	archivo.seek(0)
	contenido = archivo.read()

	##### CONSTRUYE Y EJECUTRA EL LEXER #####
	lexer = sl_lexer.build_lexer(contenido)
	error_lex = sl_lexer.get_errors()
	sl_lexer.lineas = lineas

	# Loop para extraer tokens correctos

	while True:
		tok = lexer.token()
		if not tok: break
		out.append(tok)		# Se incluyen en la lista de out

	# Imprimir resultados

	if len(error_lex) != 0:	# Lista de error no vacía
		for t in error_lex:
			print("Error: Se encontró un caracter inesperado \"" + t.value[0] + "\" en la línea " + str(t.lineno) + ", columna " + getcol(t.lineno, t.lexpos) + ".")
		exit(0)

	sl_lexer.lexer.lineno = 1	# Reinicia el contador de lineas del lexer/parser
	


	##### CONSTRUYE Y EJECUTA EL PARSER #####
	parser = sl_parser.build_parser()
	AST = parser.parse(contenido)
	if sl_parser.get_errors(): 
		error_par = sl_parser.get_errors() # Lista de error del parser no vacia, se imprime solo el primer token de error de sintaxis encontrado
		p = error_par[0]
		print("Error de sintaxis: Token '" + str(p.value) + "' inesperado en línea " + str(p.lineno) + ", columna " + getcol(p.lineno, p.lexpos) + ".")
		exit(0)



	##### CONSTRUYE Y EJECUTA EL TYPECHECKER Y LA TABLA DE SIMBOLOS #####
	SymTab = sl_typecheck.build_symbol_table(AST)
	if sl_typecheck.get_errors(): 
		error_st = sl_typecheck.get_errors()
		for st in error_st:
			err_type = st[0]
			value = st[1]
			lineno = st[2]
			lexpos = st[3]
			if len(st) > 4:
				inv_type1 = st[4]
			if len(st) > 5:
				inv_type2 = st[5]

			if err_type == "redec":
				print("Error en la linea " + str(lineno) + ", columna " + getcol(lineno, lexpos) + ": La variable '" + str(value) + "' ya ha sido declarada en este alcance.")
			elif err_type == "nodec":
				print("Error en la linea " + str(lineno) + ", columna " + getcol(lineno, lexpos) + ": La variable '" + str(value) + "' no ha sido declarada.")
			elif err_type == "inv_tex":
				print("Error en la linea " + str(lineno) + ", columna " + getcol(lineno, lexpos) + ": Instrucción '" + str(value) + "' espera expresiones de tipo '"+str(inv_type1)+"', no de tipo '" + str(inv_type2) + "'.")
			elif err_type == "inv_opr":
				print("Error en la linea " + str(lineno) + ", columna " + getcol(lineno, lexpos) + ": Operador '" + str(value) + "' no sirve con operandos de tipo '" + str(inv_type1) + "' y '" + str(inv_type2) + "'.")
			elif err_type == "inv_assign":
				print("Error en la linea " + str(lineno) + ", columna " + getcol(lineno, lexpos) + ": No es posible asignar expresiones de tipo '" + str(inv_type2) + "' a variables de tipo '" + str(inv_type1) + "'.")
			elif err_type == "inv_neg":
				print("Error en la linea " + str(lineno) + ", columna " + getcol(lineno, lexpos) + ": No es posible negar expresiones de tipo '" + str(inv_type1) + "'.")
			elif err_type == "inv_boolneg":
				print("Error en la linea " + str(lineno) + ", columna " + getcol(lineno, lexpos) + ": No es posible negar booleanamente expresiones de tipo '" + str(inv_type1) + "'.")
			elif err_type == "inv_setunopr":
				print("Error en la linea " + str(lineno) + ", columna " + getcol(lineno, lexpos) + ": Operador '" + str(value) + "' no sirve con expresiones de tipo '" + str(inv_type1) + "'.")
			elif err_type == "read_ol":
				print("Error en la linea " + str(lineno) + ", columna " + getcol(lineno, lexpos) + ": La variable de iteración '" + str(value) + "' no puede ser modificada.")
			elif err_type == "inv_set":
				print("Error en la linea " + str(lineno) + ", columna " + getcol(lineno, lexpos) + ": Tipo 'set' solo puede tener elementos de tipo 'int'.")
		exit(0)



	##### LEE LOS FLAGS E IMPRIME LOS RESULTADOS ANTES DE INTERPRETAR #####	
	if "-t" in argv:
		print("\nTokens List:\n")
		for t in out:
			if(t.type == "IDENTIFIER" or t.type == "SETSUBSTRACT" or t.type == "GREATERTHAN"):
				print("token " + str(t.type) + "\tvalue (" + str(t.value) + ") at line " + str(t.lineno) + ", column " + getcol(t.lineno, t.lexpos))
			else:
				print("token " + str(t.type) + "\t\tvalue (" + str(t.value) + ") at line " + str(t.lineno) + ", column " + getcol(t.lineno, t.lexpos))
		print("")


	if "-a" in argv:
		print("\nAST:\n")
		print(AST)
		print("")


	if "-s" in argv:
		print("\nSymbol Table:\n")
		print(sl_typecheck.tostring_symbol_table())
		print("")



	##### INTERPRETA EL PROGRAMA #####
	sl_interpreter.execute(AST, SymTab,lineas)

if __name__ == "__main__":
	main()