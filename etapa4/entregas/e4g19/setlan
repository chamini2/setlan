#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Created on 15/2/2015

@author: David Klie
@author : Gustavo Benzecri
'''

import ply.yacc,ply.lex,sys
from setlanlex import *
from setlanparser import *
from Arbol import *
from SymbolTable import symbol_err

lexer = ply.lex.lex() # Inicializacion del lexer
parser = ply.yacc.yacc() # Inicializacion del parser

def printTokens(data):
    lexer.input(data)
    tokens=''
    while True:
       tok = lexer.token()
       if not tok:
           break
       tokens+="token " + tok.type
       if (len(tok.type) < 10):
           tokens+='\t\tvalue (%s)'%tok.value + (' at line %d, column %d\n'%(tok.lineno,find_column(data,tok)))
       else:
           tokens+='\tvalue (%s)'%tok.value + (' at line %d, column %d\n'%(tok.lineno,find_column(data,tok)))
    return tokens


if __name__ == '__main__':
    if len(sys.argv)>=2: # Verificacion de parametros de entrada
        program=open(sys.argv[1],'r')
    else:
        sys.stderr.write("Codigo fuente no encontrado.\n")
        exit(-1)
    data=program.read()
    print_tokens='-t' in sys.argv
    print_ast= '-a' in sys.argv
    print_symbolTable= '-s' in  sys.argv
    token_list=None
    
    if print_tokens:
        token_list=printTokens(data)
    if not lex_error:  
        lexer.lineno=1  
        result = parser.parse(data, tracking=True)

    if lex_error:
        for i in lex_error:
            print i
    elif print_tokens: print token_list
    
    if parser_error:
        for i in parser_error:
            print i 
    elif print_ast and result:
        print result

    if result:
        symbolTable= result.printTable()

    if symbol_err!=[]:
        for i in symbol_err:
                print i
    elif print_symbolTable:
        print symbolTable

    if not (print_ast or print_tokens or print_symbolTable) and \
        not (lex_error or parser_error or symbol_err):
        result.startExecution()
            