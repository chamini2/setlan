#!/usr/bin/env python
# -*- coding: UTF-8 -*-

##########################################
# CI3725 Traductores e Interpretadores   #
# Entrega 3. Grupo 6                     #
# Maria Victoria Jorge 11-10495          #
# Enrique Iglesias 11-10477              # 
##########################################

import ply.lex as lex
import sys
import ply.yacc as yacc
from parser import *
from SymTable import *

# Palabras reservadas del lenguaje
reserved = {
    # Lenguaje
    'program' : 'Program',
    'using' : 'Using',
    'in' : 'In',

    # Condicionales
    'if' : 'IF',
    'else' : 'ELSE',

    # Ciclos
    'for' : 'FOR',
    'min' : 'MIN',
    'max' : 'MAX',
    'repeat' : 'REPEAT',
    'while' : 'WHILE',
    'do' : 'DO',

    # E/S
    'scan' : 'Scan',
    'print' : 'Print',
    'println' : 'Println',

    # Tipos
    'int' : 'Int',
    'bool' : 'Boolean',
    'set' : 'Set',

    # Operadores Logicos
    'and' : 'And',
    'or' : 'Or',
    'not' : 'Not',

    # Valores Booleanos
    'true' : 'True',
    'false' : 'False'
}

# Tokens que se pueden reconocer
tokens = [
    # Identificadores
    'ID',

    # Operadores de mapeo
    'PlusMap',
    'MinusMap',
    'TimesMap',
    'DivideMap',
    'ModuleMap',

    # Cadena de caracteres
    'String',

    # Operadores de conjuntos
    'Union',
    'Intersection',
    'Diference',
    'MinSet',
    'MaxSet',
    'Size',
    'At',

    # Operadores relacionales
    'Less',
    'Greater',
    'GreaterEqual',
    'LessEqual',
    'Equals',
    'NotEqual',

    # Lenguaje
    'Number',
    'Comma',
    'Assign',
    'Semicolon',
    'OpenCurly',
    'CloseCurly',
    'Rparen',
    'Lparen',

    # Operadores de enteros
    'Plus',
    'Minus',
    'Times',
    'Divide',
    'Module'
] + list(reserved.values())


def t_ID(t):
    r'[_A-Za-z]([_A-Za-z0-9])*'
    t.type = reserved.get(t.value,'ID')
    return t

t_PlusMap = r'<\+>'
t_MinusMap = r'<->'
t_TimesMap = r'<\*>'
t_DivideMap = r'</>'
t_ModuleMap = r'<%>'

def t_String(t):
    r'"([^"\\\n]|\\"|\\\\|\\n)*"'
    t.value = t.value[1:-1]
    return t

t_Union = r'\+\+'
t_Intersection = r'><'
t_Diference = r'\\'
t_MaxSet = r'>\?'
t_MinSet = r'<\?'
t_Size = r'\$\?'
t_At = r'@'
t_Less = r'>'
t_Greater = r'<'
t_GreaterEqual = r'>='
t_LessEqual = r'<='
t_Equals = r'=='
t_NotEqual = r'/='

# Retorna el valor de un numero usando el tipo int de Python
def t_Number(t):
    r'\d+'
    t.value = int(t.value)    
    if ((t.value > 2147483647) or (t.value < -2147483648)):
        error.append(t)
    return t

t_Comma = r','
t_Assign = r'='
t_Semicolon = r';'
t_OpenCurly = r'\{'
t_CloseCurly = r'\}'
t_Lparen = r'\('
t_Rparen  = r'\)'
t_Plus    = r'\+'
t_Minus   = r'-'
t_Times   = r'\*'
t_Divide  = r'/'
t_Module = r'%'


# Funcion para realizar un seguimiento de los numeros de linea. El unico caracter
# valido para el salto de linea es '\n'
def t_newline(t):
    r'\n+'
    t.lexer.lineno += len(t.value)
    
# Ignora tabs, espacios y comentarios (estilo Python)
t_ignore  = ' \t'
t_ignore_comments  = r'\#.*'
        
# Manejo de errores en caso de encontrar un caracter invalido
def t_error(t):
    error.append(t)
    t.lexer.skip(1)


if __name__ == '__main__':

    # Variable global donde se almacenan los errores del lexer en caso de existir
    global error
    error = []
    tokList = []
    lexer = lex.lex()

    if (len(sys.argv) < 3):
        print "Error con los argumentos de entrada"
        sys.exit(1)

    if(len(sys.argv) == 3):
        if not(sys.argv[2] in ['-t','-a','-s']):
            print "Error: Se introdujo un flag erroneo"
            sys.exit(1)  
    elif(len(sys.argv) == 4):
        if (not(sys.argv[2] in ['-t','-a','-s'])) or (not(sys.argv[3] in ['-t','-a','-s'])):
            print "Error: Se introdujo un flag erroneo"
            sys.exit(1) 
    else:
        if (not(sys.argv[2] in ['-t','-a','-s'])) or (not(sys.argv[3] in ['-t','-a','-s'])) or (not(sys.argv[4] in ['-t','-a','-s'])):
            print "Error: Se introdujo un flag erroneo"
            sys.exit(1) 

    archivo = sys.argv[1]
    myfile = open(sys.argv[1], "r")
    data = myfile.read()
    lexer.input(data)
    
    while True:
        tok = lexer.token()
        if not tok: break
        tokList.append(tok)

    if (len(error) != 0):
        for aux in error :
            print 'Error: Se encontro un caracter inesperado ' + str(aux.value[0]),
            print ' en la Linea ' + str(aux.lineno) +' ,Columna ',
            print str(find_column(lexer.lexdata,aux))
    else:
        parser = yacc.yacc()
        out = parser.parse(data)
        if not(iserror()):
            arbol = out.toString(0)
            out.check(find_row2(lexer.lexdata))
            if (len(errorDeclaracion)!=0):
                i = 0
                while (i < len(errorDeclaracion)):
                    print errorDeclaracion[i]
                    i+=1
            else:
                if (len(sys.argv) == 3):
                    if (sys.argv[2] == '-t'):
                        for aux in tokList:
                            if (aux.type == 'ID') or (aux.type == 'String') or (aux.type == 'Number'):
                                print 'Token' + str(aux.type) +': "' +str(aux.value)+'"(Linea ',
                                print  str(aux.lineno) +', Columna '+ str(find_column(lexer.lexdata,aux))+')'
                            else:
                                print 'Token'+str(aux.type)+'(Linea ' + str(aux.lineno) +', Columna ',
                                print str(find_column(lexer.lexdata,aux))+')'
                    elif (sys.argv[2] == '-a'):
                        print arbol
                    else:
                        print "Symbol Table\n"
                        tabla = out.printSymTable(0)
                        if (tabla!=None):
                            print tabla
                elif (len(sys.argv) == 4):
                    if ((sys.argv[2] in ['-t','-a']) and (sys.argv[3] in ['-t','-a'])):
                        for aux in tokList:
                            if (aux.type == 'ID') or (aux.type == 'String') or (aux.type == 'Number'):
                                print 'Token' + str(aux.type) +': "' +str(aux.value)+'"(Linea ',
                                print  str(aux.lineno) +', Columna '+ str(find_column(lexer.lexdata,aux))+')'
                            else:
                                print 'Token'+str(aux.type)+'(Linea ' + str(aux.lineno) +', Columna ',
                                print str(find_column(lexer.lexdata,aux))+')'
                        print arbol
                    elif ((sys.argv[2] in ['-t','-s']) and (sys.argv[3] in ['-t','-s'])):
                        for aux in tokList:
                            if (aux.type == 'ID') or (aux.type == 'String') or (aux.type == 'Number'):
                                print 'Token' + str(aux.type) +': "' +str(aux.value)+'"(Linea ',
                                print  str(aux.lineno) +', Columna '+ str(find_column(lexer.lexdata,aux))+')'
                            else:
                                print 'Token'+str(aux.type)+'(Linea ' + str(aux.lineno) +', Columna ',
                                print str(find_column(lexer.lexdata,aux))+')'
                        print "Symbol Table\n"
                        tabla = out.printSymTable(0)
                        if (tabla!=None):
                            print tabla
                    else:
                        print arbol
                        print "Symbol Table\n"
                        tabla = out.printSymTable(0)
                        if (tabla!=None):
                            print tabla
                else:
                    for aux in tokList:
                        if (aux.type == 'ID') or (aux.type == 'String') or (aux.type == 'Number'):
                            print 'Token' + str(aux.type) +': "' +str(aux.value)+'"(Linea ',
                            print  str(aux.lineno) +', Columna '+ str(find_column(lexer.lexdata,aux))+')'
                        else:
                            print 'Token'+str(aux.type)+'(Linea ' + str(aux.lineno) +', Columna ',
                            print str(find_column(lexer.lexdata,aux))+')'

                    print arbol
                    print "Symbol Table\n"
                    tabla = out.printSymTable(0)
                    if (tabla!=None):
                        print tabla
    myfile.close()