Ene-Mar 2015
Proyecto I  
Entrega 2 ci-3725
Integrantes:
    Jesus Sanchez 10-10898
    Jose Barrientos 10-10800 

README 

Este proyecto consiste en la implementación de un analizador sintáctico 
(parser) que imprime su correspondiente árbol sintáctico abstracto (AST) 
para el lenguaje setlan, como continuación a la entrega anterior (lexer) 
y que forma parte del objetivo del curso de diseñar el front-end de dicho
lenguaje. Para su desarrollo se llevaron a cabo las siguientes acciones:

Iniciando sobre la primera entrega (Analizador lexicográfico) y haciendo 
uso el modulo YACC de python se implementaron todas las clases con su 
respectivo constructor y función toString (__str__ en python), además de 
las funciones necesarias para la construcción del parser y poder llevar a 
cabo recursivamente la impresión del AST .


Para ejecutar el programa se escribe por consola:

> chmod u+x ./setlan (para asignar permisos de ejecución, puede no ser necesario
                      en ciertos equipos)
> ./setlan arhivo.stl

donde:
    -setlan es el programa principal
    -archivo.stl es un código de lenguaje setlan a ser leído por el programa

Estado del proyecto:
Tomando como base los resultados obtenidos sobre la ejecución de los casos de
prueba propios y los elaborados por los preparadores del curso se puede decir 
que el proyecto se encuentra en estado perfectamente funcional.

Nota: Las 4 advertencias generadas por yacc la primera vez que se corre el código
corresponden a conflictos Shift/Reduce "inevitables" provenientes de la existencia
de reglas que pueden ejecutarse antes de la lectura de todos sus tokens. Un ejemplo
claro de esto es la regla asociada al "if" y al "if else", las cuales son
ineludibles y yacc opta, "afortunadamente", por elegir la regla "más larga" (Shift),
lo cual es perfecto para nuestro caso. Más información al respecto 
@: http://luv.asn.au/overheads/lex_yacc/yacc.html on: "Shift/Reduce Conflicts".