##########################################
# CI3715 Traductores e Interpretadores   #
# Entrega 2. Grupo 6                     #
# Maria Victoria Jorge 11-10495          # 
# Enrique Iglesias 11-10477              #
##########################################

PROGRAM -> 'program' INST

INST -> 'id' '=' EXP
	  |	'{' DECLARAR INST_LIST '}'
	  | '{' INST_LIST '}'
	  |	'scan' 'id'
	  | 'print' ENUM_LIST
	  | 'println' ENUM_LIST
	  | 'if' '(' EXP ')' INST 'else' INST
	  | 'if' '(' EXP ')' INST
	  |	'for' 'id' DIRECCION EXP 'do' INST
	  | 'repeat' INST 'while' EXP
	  | 'repeat' INST 'while' EXP 'do' INST
	  |	'while' EXP 'do' INST

DECLARAR -> 'using' DEC_LIST 'in'

DEC_LIST ->	TIPOS ID_LIST ';' DEC_LIST
		  |	TIPOS ID_LIST ';'

ID_LIST -> ID_LIST ',' 'id'
		 | 'id'

TIPOS -> 'int'
	   | 'set'
	   | 'bool'

INST_LIST -> INST';' INST_LIST
		   | Epsilon

ENUM_LIST -> 'String'
            | EXP
            | ENUM_LIST ',' EXP
            | ENUM_LIST ',' 'String'

DIRECCION -> 'min'
		   | 'max'

NUMBER_LIST -> NUMBER_LIST ',' EXP
			 | EXP

EXP ->	'number'
	 | 'id'
	 | '{' NUMBER_LIST '}'
	 | '(' EXP ')'
	 | '-' EXP
	 | EXP '+' EXP
	 | EXP '-' EXP
	 | EXP '*' EXP
	 | EXP '/' EXP
	 | EXP '%' EXP
	 | EXP '<+>' EXP
	 | EXP '<->' EXP
	 | EXP '<*>' EXP
	 | EXP '</>' EXP
	 | EXP '<%>' EXP
	 | EXP '++' EXP
	 | EXP '><' EXP
	 | EXP '\' EXP
	 | '>?' EXP
	 | '<?' EXP
	 | '$?' EXP
	 | 'true'
	 | 'false' 
	 | EXP 'and' EXP
	 | EXP 'or' EXP
	 | 'not' EXP
	 | EXP '==' EXP
	 | EXP '>' EXP
	 | EXP '>=' EXP
	 | EXP '<' EXP
	 | EXP '<=' EXP
	 | EXP '/=' EXP
	 | EXP '@' EXP


NOTA: para tener mayor legilibilidad y que la lectura de la gramática sea más 
natural utilizamos las palabras y símbolos propias de Setlan, en lugar de los
nombres de los tokens que utilizamos durante la implementación del lexer. De igual
forma a continuación describimos cuál es el token correspondiente a los simbolos
aquí utilizados:


'and'		corresponde a:	'And'
'bool'		corresponde a:	'Boolean'
'do'		corresponde a:	'Do'
'else'		corresponde a:	'ELSE'
'false'		corresponde a:	'False'
'for'		corresponde a:	'FOR'
'id'		corresponde a:	'ID'
'if'		corresponde a:	'IF'
'in'		corresponde a:	'In'
'int'		corresponde a:	'Int'
'min'		corresponde a:	'MIN'
'max'		corresponde a:	'MAX'
'not'		corresponde a:	'Not'
'number'	corresponde a:	'Number'
'or'		corresponde a:	'Or'
'print'		corresponde a:	'Print'
'println'	corresponde a:	'Println'
'program'	corresponde a:	'Program'
'string'	corresponde a:	'String'
'repeat'	corresponde a:	'REPEAT'
'scan'		corresponde a:	'Scan'
'set'		corresponde a:	'Set'
'true'		corresponde a:	'True'
'using'		corresponde a:	'Using'
'while'		corresponde a:	'WHILE'
'('			corresponde a:	'LParen'
')'			corresponde a:	'RParen'
'{'			corresponde a:	'OpenCurly'
'}'			corresponde a:	'CloseCurly'
','			corresponde a:	'Comma'
';'			corresponde a:	'Semicolon'
'+'			corresponde a:	'Plus'
'-'			corresponde a:	'Minus'
'*'			corresponde a:	'Times'
'/'			corresponde a:	'Divide'
'%'			corresponde a: 	'Module'
'>?'		corresponde a:	'MaxSet'
'<?'		corresponde a:	'MinSet'
'$?'		corresponde a:	'Size'
'<*>'		corresponde a:	'TimesMap'
'</>'		corresponde a:	'DivideMap'
'<%>'		corresponde a:	'ModuleMap'
'<+>'		corresponde a:	'PlusMap'
'<->'		corresponde a:	'MinusMap'
'@'			corresponde a:	'At'
'++'		corresponde a:	'Union'
'><'		corresponde a:	'Intersection'
'\'			corresponde a:	'Diference'
'<'			corresponde a:	'Less'
'>'			corresponde a:	'Greater'
'<='		corresponde a:	'LessEqual'
'>='		corresponde a:	'GreaterEqual'
'='			corresponde a:	'Assign'
'=='		corresponde a:	'Equals'
'/='		corresponde a:	'NotEqual'