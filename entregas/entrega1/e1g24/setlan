#!/usr/bin/env python
# -*- coding: utf-8 -*-

####
#CI3725 - Etapa 1 - Análisis Lexicográfico
#Fabio, Castro, 10-10132
#Antonio, Scaramazza 11-10957
####

import ply.lex as lex

# Palabras reservadas del lenguaje
reserved = {
    # lenguaje
    'program' : 'Program',

    # tipos
    'int' : 'Int',
    'bool' : 'Bool',
    'set' : 'Set',

    ## valores
    'true' : 'True',
    'false' : 'False',

    # instrucciones
    'using' : 'Using',
    'in' : 'In',

    ## condicionales
    'if' : 'If',
    'else' : 'Else',

    ## lazos
    'repeat' : 'Repeat',
    'while' : 'While',

    'do': 'Do',

    'for' : 'For',

    ## entrada/salida
    'scan' : 'Scan',

    'print' : 'Print',
    'println' : 'PrintLn',

    # expresiones/operadores
    'or' : 'Or',
    'and' : 'And',
    'not' : 'Not',

}

# Tokens a ser reconocidos
tokens = [
    # Lenguaje
    'Number',
    'Comma',
    'SemiColon',
    'Assign',

    # Identificadores
    'ID',

    # Instrucciones
    'Arrow',
    'String',

    # Expresiones/Operadores
        # Operadores de Conjuntos
            'SetPlus',
            'SetMinus',
            'SetTimes',
            'SetMod',
            'SetDivition',
            'SetMax',
            'SetMin',
            'SetLen',
            'SetIntersection',
            'SetUnion',
            'SetDifference',
        # Operadores de Enteros
            'Plus',
            'Minus',
            'Times',
            'Divide',
            'Module',
        #  Operadores Booleanos
            'Less',
            'LessEq',
            'Great',
            'GreatEq',
            'Equal',
            'UnEqual',
            # Operadores Booleanos sobre Conjuntos
                'SetBelong',   
        #  Parentizacion
           'OpenParen',
           'CloseParen',
           'OpenCurly',
           'CloseCurly'
] + list(reserved.values())

# Devuelve el valor almacenado en el tipo entero de Python
def t_Number(t):
    r'\d+'
    t.value = int(t.value)
    return t

t_Comma = r','
t_SemiColon = r';'
t_Assign = r'='

def t_ID(t):
    r'\w[\w\d]*'
    # Si no existen palabras reservadas que concuender, entonces es un Identificador
    t.type = reserved.get(t.value, 'ID')
    return t

t_Arrow = r'->'

# Los Strings almacenan toda entrada sin importar los saltos de linea
# Siempre que estas esten entre " "

t_String = r'".*"'

# token de conjuntos
t_SetPlus = r'\<\+\>'
t_SetMinus = r'\<\-\>'
t_SetTimes = r'\<\*\>'
t_SetDivition = r'\<\/\>'
t_SetMod = r'\<\%\>'
t_SetMax = r'\>\?'
t_SetMin = r'\<\?'
t_SetLen = r'\$\?'
t_SetIntersection = r'\>\<'
t_SetUnion = r'\+\+'
t_SetDifference = r'\\'

# token de entero
t_Plus = r'\+'
t_Minus = r'-'
t_Times = r'\*'
t_Divide = r'/'
t_Module = r'%'

# token de booleano
t_Less = r'\<'
t_LessEq = r'\<\='
t_Great = r'\>'
t_GreatEq = r'\>\='
t_Equal = r'\=\='
t_UnEqual = r'\/\='

#token de booleano sobre entero
t_SetBelong = r'\@'

# parentizacion
t_OpenParen = r'\('
t_CloseParen = r'\)'
t_OpenCurly = r'\{'
t_CloseCurly = r'\}'

# Ignora espacion, tabuladores y comentarios en formato C
t_ignore = " \t"
t_ignore_COMMENT = r'\#.*'

# El unico caracter de salto de linea a conciderar es "\n"
def t_newline(t):
    r'\n+'
    t.lexer.lineno += t.value.count('\n')

# Determinar el numero de columna en la linea actual
def find_column(text,token):
    last_cr = text.rfind('\n',0,token.lexpos)
    if last_cr < 0:
        last_cr = -1
    column = token.lexpos - last_cr
    return column

# Error a mostrar en caso de encontrar un caracter inseperado
def t_error(t):
    errors_list.append("Error: Se encontró un caracter inesperado '%s' en la línea %d, columna %d"
                       % (t.value[0], t.lineno, find_column(lexer.lexdata, t)))
    t.lexer.skip(1)

# El archivo es analisado por el lexer, y devuelto en una lista de tokens
def lexing(file):

    global errors_list, lexer

    lexer = lex.lex()
    tokens_list = []
    errors_list = []

    lexer.input(file)

    # Analizar el archivo entero mediante el lexer
    for tok in lexer:
        tokens_list.append(tok)

    # Si no se encuentran caracteres inesperados
    if not errors_list:
        return tokens_list
    else:
        # Imprimir cada caracter inesperado
        for error in errors_list:
            print error

        # Lista vacia para indicar error
        return []

###############################################################################

# Solo a ser llamado si se utiliza como modulo principal.
def main(argv = None):
    import sys    # argv, exit

    if argv is None:
        argv = sys.argv

    if len(argv) == 1:
        print "ERROR: No input file"
        sys.exit(1) ## return (averiguar cuál es mejor)
    elif len(argv) > 2:
        print "ERROR: Invalid number of arguments"
        sys.exit(1) ## return (averiguar cuál es mejor)

    # Abrir el decriptor de archivos
    file = open(argv[1], 'r')

    # Leer el archivo y pasarlo al lexer
    tokens_list = lexing(file.read())

    for tok in tokens_list:
        print 'Token' + str(tok.type),
        if str(tok.type) == 'ID':
            print ': "' + tok.value + '"',
        elif str(tok.type) == 'String':
            print ': ' + tok.value,
        print '(Línea ' + str(tok.lineno) + ',',
        print 'Columna ' + str(find_column(lexer.lexdata, tok)) + ')'
    sys.exit(0)

# Si se ejecuta el modulo.
if __name__ == "__main__":
    main()
